// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../node_modules/.prisma/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              Int           @id @default(autoincrement())
  name            String        @unique
  email           String        @unique
  password        String
  bio             String?
  avatar          String?
  gender          String        @default("secret") // secret, male, female
  birthday        DateTime?
  role            String        @default("User") // User, Admin, Reviewer
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  diaries         Diary[]       @relation("UserDiaries")
  comments        Comment[]
  likes           Like[]
  favorites       Favorite[]
  following       UserFollow[]  @relation("UserFollowing")
  followers       UserFollow[]  @relation("UserFollowers")
  viewHistory     ViewHistory[]
  commentLikes    CommentLike[]
  reviewedDiaries Diary[]       @relation("DiaryReviewedBy")
  ossObjects      OssObject[]
}

model Diary {
  id             String        @id @default(uuid())
  parentId       String?
  parent         Diary?        @relation("DiaryParent", fields: [parentId], references: [id])
  children       Diary[]       @relation("DiaryParent")
  authorId       Int
  author         User          @relation("UserDiaries", fields: [authorId], references: [id])
  slug           String        @unique
  title          String
  tags           Tag[]         @relation("DiaryTags")
  content        String
  thumbnail      String?
  images         String[]
  video          String?
  viewCount      Int           @default(0)
  viewHistory    ViewHistory[]
  likeCount      Int           @default(0)
  likes          Like[]
  favoriteCount  Int           @default(0)
  favorites      Favorite[]
  commentCount   Int           @default(0)
  comments       Comment[]
  shareCount     Int           @default(0)
  published      Boolean       @default(false)
  publishedAt    DateTime?
  status         String        @default("Pending") // Pending, Approved, Rejected
  rejectedReason String?
  reviewedById   Int?
  reviewedBy     User?         @relation("DiaryReviewedBy", fields: [reviewedById], references: [id], onDelete: SetNull)
  reviewedAt     DateTime?
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt

  @@index([authorId])
  @@index([reviewedById])
  @@index([parentId]) // 新增索引
}

model Comment {
  id         String        @id @default(uuid())
  diaryId    String
  diary      Diary         @relation(fields: [diaryId], references: [id], onDelete: Cascade)
  authorId   Int
  author     User          @relation(fields: [authorId], references: [id], onDelete: Cascade)
  content    String
  createdAt  DateTime      @default(now())
  updatedAt  DateTime      @updatedAt
  parentId   String?
  parent     Comment?      @relation("CommentReplies", fields: [parentId], references: [id], onDelete: Cascade)
  likeCount  Int           @default(0)
  likes      CommentLike[]
  replyCount Int           @default(0)
  replies    Comment[]     @relation("CommentReplies")

  @@index([diaryId])
  @@index([authorId])
  @@index([parentId])
}

model CommentLike {
  userId    Int
  commentId String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  comment   Comment  @relation(fields: [commentId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())

  @@id([userId, commentId])
  @@index([commentId])
}

model Tag {
  id        String   @id @default(uuid())
  name      String   @unique
  diaries   Diary[]  @relation("DiaryTags")
  viewCount Int      @default(0) // 新增：标签总浏览量
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Like {
  userId    Int
  diaryId   String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  diary     Diary    @relation(fields: [diaryId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())

  @@id([userId, diaryId])
}

model Favorite {
  userId    Int
  diaryId   String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  diary     Diary    @relation(fields: [diaryId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())

  @@id([userId, diaryId])
}

model ViewHistory {
  id       String   @id @default(uuid())
  userId   Int
  diaryId  String
  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  diary    Diary    @relation(fields: [diaryId], references: [id], onDelete: Cascade)
  viewedAt DateTime @default(now())

  @@index([userId])
  @@index([diaryId])
}

model OssObject {
  id        String   @id @default(uuid())
  key       String   @unique
  userId    Int
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  ext       String
  width     Int?
  height    Int?
  duration  Float?
  type      String?
  createdAt DateTime @default(now())
}

model UserFollow {
  id          Int      @id @default(autoincrement())
  followerId  Int
  followingId Int
  follower    User     @relation("UserFollowing", fields: [followerId], references: [id])
  following   User     @relation("UserFollowers", fields: [followingId], references: [id])
  createdAt   DateTime @default(now())

  @@unique([followerId, followingId])
  @@index([followerId])
  @@index([followingId])
}

model TrackStats {
  id        Int      @id @default(autoincrement())
  type      String // 如 user_total, diary_total, diary_view, tag_view, comment_total, ...
  date      DateTime // 统计日期（如2025-05-08 00:00:00，按天分片）
  value     Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([type, date])
}
